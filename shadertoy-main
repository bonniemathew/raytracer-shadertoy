struct ray
{
    vec3 origin;
    vec3 direction;
};

struct sphere
{
    vec3 center;
    float radius;
};
    
float intersectSphere(sphere s, ray r)
{
    // (P(t) - sphere.center)^2 = sphere.radius^2
    // (r.origin + t * r.direction - sphere.center)^2 = sphere.radius^2
    // ((r.origin - sphere.center) - t * r.direction)^2 = sphere.radius^2
    // A = r.origin - sphere.center
    // B = t * r.direction
    // (A+B)^2 = A^2 + 2*A*B + B^2 ==> dot(A,A) + 2*A*B + dot(B,B) 
    //  =  dot((r.origin-sphere.center), r.origin-sphere.center) + 2 * (r.origin-sphere.center) * (t.B) + t^2* dot(B,B) -R^2 = 0
    vec3 A = r.origin - s.center;
    float a = dot(r.direction, r.direction); // Coeff of t^2 (at^2 + bt + c = 0)
    float b = 2.0 * dot(A, r.direction); // Coeff of t
    float c =  dot(A,A) - s.radius * s.radius;
    
    float disc = b*b - 4.0*a*c;
    
    if(disc < 0.0)
        return -1.0;
    else 
        return (-b - sqrt(disc)) / (2.0 * a);
}

vec3 bgColor(ray r)
{
    vec3 normDir = normalize(r.direction);
    float t = 0.5*(normDir.y + 1.0);
    vec3 white = vec3(1.0, 1.0, 1.0);
    vec3 skyBlue = vec3(0.5, 0.7, 1);
    vec3 color = (1.0 - t) * white + (t * skyBlue);
    return color;
}

// To find the P from the parametric ray equation
vec3 rayAtP(ray r, float t)
{
    vec3 P = r.origin + r.direction * t;
    return P;
}

//Random number 
float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

// Random position in Sphere
vec3 randomSpherePoint(vec2 uv)
{
    vec3 randPoint = 2.0 * vec3(rand(uv), rand(uv), rand(uv)) - vec3(1.0);
    
    while(true)
    {
        if(length(randPoint) <= 1.0)
            break;
        
        else
            randPoint = 2.0 * vec3(rand(uv), rand(uv), rand(uv)) - vec3(1.0);
            
    }
    return randPoint;
}


vec3 findColor(ray r)  
{

    // Sphere
    sphere s1;
    s1.center = vec3(0.0, 0.0, -1.0);
    s1.radius = 0.5;
    
    sphere s2;
    s2.center = vec3(0, 1, -2.0);
    s2.radius = 1.0;
    
    float d1 = intersectSphere(s1, r);
    float d2 = intersectSphere(s2, r);
    
    float d = d1;
    vec3 sphereCenter = s1.center;
    
    vec3 finalColor;
    
    if(d1 > 0.0)
    {
        d = d1;
        sphereCenter = s1.center;

        vec3 HitPoint = rayAtP(r, d);
        vec3 rayToSphereNormal = normalize(HitPoint - sphereCenter);
        ray secondaryRay;
        secondaryRay.origin = HitPoint;
        secondaryRay.direction = normalize(randomSpherePoint(vec2(HitPoint.x, HitPoint.y)) - HitPoint);
        //vec3 surfColor = vec3((rayToSphereNormal.x + 1.0) * 0.5, (rayToSphereNormal.y + 1.0) * 0.5,  (rayToSphereNormal.z+1.0) * 0.5);

        finalColor =  vec3(d, 0, 0) ;//+ 0.5 * findColor(secondaryRay);
    }
    
    if(d2 > 0.0)
    {
        d = d2;
        sphereCenter = s2.center;

        vec3 HitPoint = rayAtP(r, d);
        vec3 rayToSphereNormal = normalize(HitPoint - sphereCenter);
        ray secondaryRay;
        secondaryRay.origin = HitPoint;
        secondaryRay.direction = normalize(randomSpherePoint(vec2(HitPoint.x, HitPoint.y)) - HitPoint);
        //vec3 surfColor = vec3((rayToSphereNormal.x + 1.0) * 0.5, (rayToSphereNormal.y + 1.0) * 0.5,  (rayToSphereNormal.z+1.0) * 0.5);

        finalColor +=  vec3(0, d, 0) ;//+ 0.5 * findColor(secondaryRay);
    }
    
    if(d > 0.0)
    {
        return finalColor;
    }
    else 
    {
        return bgColor(r);
    }
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Multiple rays per pixel for anti-aliasing
    const int NUM_RAYS = 10;
    
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    //Map to (-2,-1) {lower left} to (2,1) {upper right} range
    vec2 mappedUV = uv;
    mappedUV.x = 4.0 * uv.x - 2.0;
    mappedUV.y = 2.0 * uv.y - 1.0;

    // Ray
    ray r[NUM_RAYS];
    vec3 color[NUM_RAYS];
 
    for(int i =0; i < NUM_RAYS; i++)
    {

        vec2 uvRand;
        uvRand.x  = uv.x + float(i/NUM_RAYS) * 0.001;
        uvRand.y = uv.y + float((i-NUM_RAYS)/NUM_RAYS) * 0.001;
        float randNum = rand(uvRand);
        r[i].origin = vec3(0,0,0);
        r[i].direction = vec3(mappedUV.x + randNum * 0.001, mappedUV.y + randNum *0.001, -1.0);
        color[i] = findColor(r[i]);
    }
    
	vec3 finalColor;
    for(int i =0; i < NUM_RAYS;i++)
    {
        finalColor += color[i];
    }
    finalColor /= float(NUM_RAYS);
    
    // Get the Bg Color
    vec3 col = finalColor;

    // Output to screen
    fragColor = vec4(col,1.0);
}
